

APP FEATURES/FLOW  BREAKDOWN -----------------------------------------------------------------------------------------------------------------

User visits the app
- Signin/Signup page (Using magic links)
  - When user visits the app 
    IF not signed in
     - See a login page
        - Enters the email
        - magic link is sent
        - clicks the magic link
        - check if user is first time logging in
           - Prompts user to enter details
        - take him to main app page  

    IF already signed in
    - take him to main app page
    


POST Signin :
Main view of app

- Top
  - Header 
    - Option to signout
- Left Section
  - Option to select source and destination
    - Enters the source
      - Shows list of source location
    - Enters the destination
      - Shows list of destination location
    
    - Confirms route
      - Shows list of available cab options with estimated fare
        - Economy
        - Comfort
        - Elite 

    - Selects cab options   
      - option to confirm book a ride.
      - confirms ride
        - shows the ETA of the cab.


- Right Section
  - Map
    - When user selects the source
       - Shows the source marker on Map
    - When user selects the destination
       - Shows the destination marker on Map
    - When source and destination are select then show route in Map



Ride booking flow : Rider -> Driver

- User's End ::
   - 1. User enter the source and destination -> shows a route in map
   - 2. User confirms the route -> shows cab options
   - 3. User selects the Cab options -> Button to confirm the ride booking
   - 4. User confirms the Ride booking 

     - Driver's End :: 
       1. All the drivers who belongs to the cab options gets the incoming request
       2. Request shows users location pickup and drop.
       3. If Driver accepts
          - Request is delete to all other drivers and assigned to current Driver
       4. If Driver rejects
          - Do nothing.
       5. IF Driver accepts the request confirm is sent to user about the drivers location and etp
       6. User and driver no both sees the status of the ride.
       7. User can only see the status but driver can change it
       8. When driver reaches the pickup location he makes 'reached at location' -> user sees that driver has reached
       9. When user sits in cab driver marks ride started-> user now sees the estimated time of journey
       10. When reached the destination driver marks 'reached destination' -> users see rider completed and total time and fare
        
        

Driver registeration ::
Enters the details
- Name
- Car -> Name, Model, YOM
- license plate
- Phone

When a driver register its details are sent to admin
When admin verifies and accepts the request then only driver can login to portal
If unverified driver tries to login,
- Either is new driver
- Or he is under verification





DATABASE TABLES :: --------------------------------------------------------------------------------------------------------------------------------------------------

┌──────────────────────┐
│       users          │
├──────────────────────┤
│ id (PK)              │
│ email                │
│ role (admin/driver/rider) │
│ status (active/pending/rejected) │
│ created_at           │
└──────────────────────┘
          │
          ├────────────────────────────────────┬───────────────────────────┐
          │                                    │                           │
          │                                    │                           │
 ┌──────────────────────┐           ┌──────────────────────┐     ┌──────────────────────┐
 │      admins          │           │      drivers         │     │      riders          │
 ├──────────────────────┤           ├──────────────────────┤     ├──────────────────────┤
 │ id (PK)              │           │ id (PK)              │     │ id (PK)              │
 │ user_id (FK)         │           │ user_id (FK)         │     │ user_id (FK)         │
 │ name                 │           │ name                 │     │ name                 │
 │ phone                │           │ phone                │     │ phone                │
 │ created_at           │           │ car_name             │     │ created_at           │
 └──────────────────────┘           │ car_model            │     └──────────────────────┘
                                    │ car_yom              │
                                    │ license_plate        │
                                    │ cab_type             │
                                    │ status               │
                                    │ created_at           │
                                    └──────────────────────┘
                                                 │
                                                 │
                                         ┌──────────────────────┐
                                         │       rides          │
                                         ├──────────────────────┤
                                         │ id (PK)              │
                                         │ user_id (FK)         │
                                         │ driver_id (FK)       │
                                         │ pickup (JSON)        │
                                         │ dropoff (JSON)       │
                                         │ status               │
                                         │ fare                 │
                                         │ created_at           │
                                         └──────────────────────┘
                                                 │
                                                 │
                                         ┌──────────────────────┐
                                         │   ride_status_logs   │
                                         ├──────────────────────┤
                                         │ id (PK)              │
                                         │ ride_id (FK)         │
                                         │ status               │
                                         │ location (JSON)      │
                                         │ timestamp            │
                                         └──────────────────────┘


NEXTJS FRONTEND ROUTES  -----------------------------------------------------------------------------------------------------------------


ADMIN :: ------------------------------------------

DRIVER :: -----------------------------------------

USER :: -------------------------------------------

/user/auth ->> ...
/user/trip ->> ...

/user/book-ride 
  -> layout.tsx 
      [left section] | [right section]
        [Ride Form]  |   [Map] 
                     | 
                     |


/user/book-ride
  - BookRideLayout.tsx -> (layout)
          
      [left section] | [right section]
        [Ride Form]  |   [Map] 
                     | 
                     |

/user/book-ride/[[...location]] 
   - BookRideLayout.tsx -> (layout)

      [left section] | [right section]
        [Ride Form]  |   [Map] 
                     | 
                     |


/user/trip -> layout.tsx
 - layout.tsx
   leftSection  RightSection
    {children}      [Map]

  - /book-ride 
       leftSection        RightSection
     {booking-form-page}     [Map]

  - /book-ride/?source=173.25,45.78&dest=7854.85,22.34  
       leftSection        RightSection
     {booking-form-page}     [Map]    

  - /book-ride/?source=173.25,45.78&dest=7854.85,22.34&options=true  
        leftSection        RightSection
     {booking-form-page}     [Map]    
       {ride-options}  





COMPONETS DIRETORY STRUCTURE --------------------------------------------------------------------------------------------------------------

Layout
 - User
   - UserTripLayout.tsx
   - MainHeader
     - MainHeader.tsx
     - AppLogo.tsx
   - SubHeader
     - SubHeader.tsx
     - UserGreeting.tsx
     - BackBtn.tsx 
 - Driver
   - DriveDashboardLayout.tsx
   - MainHeader
     - MainHeader.tsx
     - AppLogo.tsx
   - SubHeader
     - SubHeader.tsx
     - UserGreeting.tsx
     - BackBtn.tsx 
 - Admin
   - UserTripLayout.tsx
   - MainHeader
     - MainHeader.tsx
     - AppLogo.tsx
   - SubHeader
     - SubHeader.tsx
     - UserGreeting.tsx
     - BackBtn.tsx 

Common
 - Map
  - MapComponent.tsx

User
 - Pages
   - BookRide
     BookRidePage.tsx
     - BookingForm
       - BookingForm.tsx
     - CabOptions
       - CabList.tsx
       - CabCard.tsx
     

Driver
 - Pages
   - DashboardPage
     - DashboardPage.tsx
     - IncomingRideRequest
       - IncomingRequestList.tsx
       - IncomingRequestCard.tsx
     - PastRides
       - PastRideList.tsx
       - PastRideCard.tsx   
   - RideRequestPage
     - RideRequestPage.tsx
     - RideRequestCard.tsx  
   - OnGoingRidePage
     - OnGoingRidePage.tsx
     - UserInfoCard.tsx
     - RideStatus.tsx  
     - TripDetailsCard.tsx


-----------------------------------------------------------------------------------------------------------------------------------------


FLOW


Admin
Admin visits /admin route
IF signed in the taken to AdminPanel else taken to admin/auth page
Auth Form will have only one input which lets the admin enter the email
When admin enters the email a magic link is sent to the email.
Admin clicks the magic link and he is logged in to the AdminPanel.
But after clicking on magic link if the admin is firt time sigining then he is 
taken to a page to add details like name and phone.
If not first time then taken to admin panel.



Driver
Driver visits /driver route

If signed in taken to Drivers Dashboard page.
If not similar to admin taken to driver/auth page
Driver enters the email, magic link is sent, driver click the magic link
If first time then needs to enter phone,name,car model,car name,license plate.
If not first time taken to Dashboard page.


User,
Similar to admin and driver, when user visits /user route,
flow is similar, just the user if first time then he needs to enter details like, name,phone.


Drivers Dashboard:
Driver see list of incoming ride request.
Each request show from whom, source location address, destination address and total distance of journey.
If the driver click on a request it shows two buttons to accepts or reject the request.
If the driver accepts the request he is assigned that ride request and that request is no longer show to other drivers , if he rejects the request,
it will still show to him and also to others.

After Driver accepts the request user and driver will both see the ride status.
User will only see ride status but the driver can change them.
Different statuses are,
- Request Accepted
- Reached pickup
- Start trip
- End trip

When can change the status by clicking on status button and it will reflect the change for both rider and driver and we will see
live status.



Rider books the cab:

When the rider books the cab, he sents his locations and cab type he have opted to backend
Backend search for the matching driver within proximity and if found, the driver is assigned to 
user/rider.

When the driver is assigned rider sees the live ride status which can be changed from Drivers dashboard by Driver only.






   
How will Admins identify themselves initially? Is there a pre-approved list of Admin emails, or can anyone sign up as an Admin? You might need a way to restrict Admin access (e.g., an invite-only system or a super-admin to approve new Admins).
- As of now anyone can become admin. We will work on superadmi logic later

What happens if an Admin rejects a Driver’s registration? Does the Driver get notified, and can they resubmit?
- As of now Admin wont reject any driver. Driver will just have to wait till the admin sees this deatils and assign cab type to him.
  So when the Driver sigins in if he still awaits the verification, we will show that under verification, login in afterwards.
AdminPanel could eventually include analytics (e.g., total rides, active Drivers) or tools to manage disputes—something to think about for scalability.
- Admin Panel could show all the riders and whether they are online or offline as of now.



How will Drivers indicate they’re “online” and ready to receive requests? Without an explicit “online/offline” toggle, you might accidentally send requests to inactive Drivers.
- We can  let driver to toggle online and offline for driver in drivers dashboard.
What if no Drivers accept a request? Does it timeout, or does the Rider get a “no drivers available” message?
- We will show rider try again after sometime no driver available.

The “live status” feature is great, but how will Drivers update their location in real-time? You’ll need a mechanism (e.g., periodic GPS pings) to keep the proximity search accurate.
- When driver changes the ride status,
  Accepts the request -> drivers location is the location he is at present.
  Reached pickup -> drivers location is the location where the rider is standing.
  Star trip -> drivers location is the location where the ride has started (same as riders pickup point)
  End trip -> drivers location is the drop off point of rider. 

How does the Rider cancel a ride? Before or after a Driver accepts? This could affect Driver availability and request visibility.
- If rider cancels the ride after the driver accepts the ride request then, the request is removed for everyone(all drivers, rider himself). 
What happens if no Driver is found within 10 km? Will the Rider get a retry option or a suggestion to choose a different cab type?
- We will tell now driver available, try again later






So there is a AuthForm which takes the email. When the form is submitted it send the an email to 
the user with the magic link.

Now we dont have separate forms for login, signin etc. We just have one form.

Now when the user click on the magic link i am making a api call to api/callback route.
This route basically exchanges the code in the magic link and a session is generated
and user is redirected to the the main trip/book-ride route.


Now lets say a user is new and he visits the app and sees AuthForm. He enters the email and magic link is sent to his email.
He the click the email and according to logic we redirects him to the book-ride route page. As of now its working fine.

When the user is authenticated using the email and magic link, supabase creates new user if not already created.
But i have dedicate  table for the user which have users name, phone etc info which need to be taken from the user.


Now what i want is that,
if a user who already signed in then we have his all details, so we take him to book-ride route page.
But if a user is new then we want him to enter his detials.

So what i want is when a user enter his email, we sent him a email with magic link. This magic  link on clicking makes a api call which create a session
for the user and redirects to book-ride.

So if we can do someting in between or after a session is create we take him to the page when he can enter his name,phone etc.
Now this is for only the new users. 







/lib
