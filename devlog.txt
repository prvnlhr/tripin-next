

APP FEATURES AND BREAKDOWN -----------------------------------------------------------------------------------------------------------------


User visits the app
- Signin/Signup page (Using magic links)
  - When user visits the app 
    IF not signed in
     - See a login page
        - Enters the email
        - magic link is sent
        - clicks the magic link
        - check if user is first time logging in
           - Prompts user to enter details
        - take him to main app page  

    IF already signed in
    - take him to main app page
    


POST Signin :
Main view of app

- Top
  - Header 
    - Option to signout
- Left Section
  - Option to select source and destination
    - Enters the source
      - Shows list of source location
    - Enters the destination
      - Shows list of destination location
    
    - Confirms route
      - Shows list of available cab options with estimated fare
        - Economy
        - Comfort
        - Premium 

    - Selects cab options   
      - option to confirm book a ride.
      - confirms ride
        - shows the ETA of the cab.


- Right Section
  - Map
    - When user selects the source
       - Shows the source marker on Map
    - When user selects the destination
       - Shows the destination marker on Map
    - When source and destination are select then show route in Map



Ride booking flow : Rider -> Driver

- User's End ::
   - 1. User enter the source and destination -> shows a route in map
   - 2. User confirms the route -> shows cab options
   - 3. User selects the Cab options -> Button to confirm the ride booking
   - 4. User confirms the Ride booking 

     - Driver's End :: 
       1. All the drivers who belongs to the cab options gets the incoming request
       2. Request shows users location pickup and drop.
       3. If Driver accepts
          - Request is delete to all other drivers and assigned to current Driver
       4. If Driver rejects
          - Do nothing.
       5. IF Driver accepts the request confirm is sent to user about the drivers location and etp
       6. User and driver no both sees the status of the ride.
       7. User can only see the status but driver can change it
       8. When driver reaches the pickup location he makes 'reached at location' -> user sees that driver has reached
       9. When user sits in cab driver marks ride started-> user now sees the estimated time of journey
       10. When reached the destination driver marks 'reached destination' -> users see rider completed and total time and fare
        
        

Driver registeration ::
Enters the details
- Name
- Car -> Name, Model, YOM
- license plate
- Phone

When a driver register its details are sent to admin
When admin verifies and accepts the request then only driver can login to portal
If unverified driver tries to login,
- Either is new driver
- Or he is under verification





Database ::

┌──────────────────────┐
│       users          │
├──────────────────────┤
│ id (PK)              │
│ email                │
│ role (admin/driver/rider) │
│ status (active/pending/rejected) │
│ created_at           │
└──────────────────────┘
          │
          ├────────────────────────────────────┬───────────────────────────┐
          │                                    │                           │
          │                                    │                           │
 ┌──────────────────────┐           ┌──────────────────────┐     ┌──────────────────────┐
 │      admins          │           │      drivers         │     │      riders          │
 ├──────────────────────┤           ├──────────────────────┤     ├──────────────────────┤
 │ id (PK)              │           │ id (PK)              │     │ id (PK)              │
 │ user_id (FK)         │           │ user_id (FK)         │     │ user_id (FK)         │
 │ name                 │           │ name                 │     │ name                 │
 │ phone                │           │ phone                │     │ phone                │
 │ created_at           │           │ car_name             │     │ created_at           │
 └──────────────────────┘           │ car_model            │     └──────────────────────┘
                                    │ car_yom              │
                                    │ license_plate        │
                                    │ cab_type             │
                                    │ status               │
                                    │ created_at           │
                                    └──────────────────────┘
                                                 │
                                                 │
                                         ┌──────────────────────┐
                                         │       rides          │
                                         ├──────────────────────┤
                                         │ id (PK)              │
                                         │ user_id (FK)         │
                                         │ driver_id (FK)       │
                                         │ pickup (JSON)        │
                                         │ dropoff (JSON)       │
                                         │ status               │
                                         │ fare                 │
                                         │ created_at           │
                                         └──────────────────────┘
                                                 │
                                                 │
                                         ┌──────────────────────┐
                                         │   ride_status_logs   │
                                         ├──────────────────────┤
                                         │ id (PK)              │
                                         │ ride_id (FK)         │
                                         │ status               │
                                         │ location (JSON)      │
                                         │ timestamp            │
                                         └──────────────────────┘

-------------------------------------------------------------------------------------------------------------------

FRONTEND ROUTES  -----------------------------------------------------------------------------------------------------------------


/user/book-ride 
  -> layout.tsx 
      [left section] | [right section]
        [Ride Form]  |   [Map] 
                     | 
                     |

                     



/user/book-ride
  - BookRideLayout.tsx -> (layout)
          
      [left section] | [right section]
        [Ride Form]  |   [Map] 
                     | 
                     |

/user/book-ride/[[...location]] 
   - BookRideLayout.tsx -> (layout)

      [left section] | [right section]
        [Ride Form]  |   [Map] 
                     | 
                     |




/user/book-ride 
/user/book-ride/options


thats not i want . my requirement is little different and complex.

So we have left section and right section
right section will only show one component i.e Map.
This map will behave different on the basis of selections done in left section.
Now left section is complex.
When the route is /book-ride, left section will show a Form component to select source and dest.
So any changes in source and dest from Form component in left section will reflect in Map in right section.
Now after selecting source and destination and clicking on search ride button,
Form will remain at its place, but now the Map in right section shrinks and so right section shrinks,
which creates a space in left section, where now it will also shows options to select different Rides.
So in left section we are now showing form and ride options side by side. Ride options list has a back button clicking on
which ride options are gone and Map and right section expands again.

Also route -> /book-ride -> left section -> [FORM], right section -> [MAP]
route -> book-ride/source,destination/options -> left section ->[FORM,OPTIONS], right section -> [MAP]

Now the above ui can be achieved in React using states values/context etc.
But can we make use of nextjs to achieve it 





















In My NextJs Uber clone app, when the user is signed he sees
a layout which has left and right section
left section has a form and right section has a map
form has source and destination selection options.
when the user selects source map shows source marker and when user select destination, des. marker is show in map
Now even if the user refreshes the page we still have the source and destination.

Now how to set nextjs 15 routes structure.
PS - Follow-up, after a source and des. are selected we show a button which shows search ride.
    clicking on which we show a ride options.     




src/appuser/book-ride
- @left
  - options 
    - page.tsx
  - default.tsx  
- @right
  - page.tsx 
- layout.tsx
- page.tsx



user\trip\book-ride\page.tsx
user\trip\book-ride\options\page.tsx
user\trip\layout.tsx



/user/trip -> layout.tsx
 - layout.tsx
   leftSection  RightSection
    {children}      [Map]

  - /book-ride 
       leftSection        RightSection
     {booking-form-page}     [Map]

  - /book-ride/?source=173.25,45.78&dest=7854.85,22.34  
       leftSection        RightSection
     {booking-form-page}     [Map]    

  - /book-ride/?source=173.25,45.78&dest=7854.85,22.34&options=true  
        leftSection        RightSection
     {booking-form-page}     [Map]    
       {ride-options}  


/user/trip/book-ride/?source=173.25,45.78&dest=7854.85,22.34
/user/trip/book-ride/
/user/trip/ride



/Trip
/BookRideView




/user/trip/book-ride/?source=173.25,45.78&dest=7854.85,22.34
/user/trip/book-ride/
/user/trip/ride


--------------------------------------------------------------------------------------------------------------
Component Directory Structure


Layout
 - User
   - UserTripLayout.tsx
   - MainHeader
     - MainHeader.tsx
     - AppLogo.tsx
   - SubHeader
     - SubHeader.tsx
     - UserGreeting.tsx
     - BackBtn.tsx 
 - Driver
   - DriveDashboardLayout.tsx
   - MainHeader
     - MainHeader.tsx
     - AppLogo.tsx
   - SubHeader
     - SubHeader.tsx
     - UserGreeting.tsx
     - BackBtn.tsx 
 - Admin
   - UserTripLayout.tsx
   - MainHeader
     - MainHeader.tsx
     - AppLogo.tsx
   - SubHeader
     - SubHeader.tsx
     - UserGreeting.tsx
     - BackBtn.tsx 

Common
 - Map
  - MapComponent.tsx

User
 - Pages
   - BookRide
     BookRidePage.tsx
     - BookingForm
       - BookingForm.tsx
     - CabOptions
       - CabList.tsx
       - CabCard.tsx
     

Driver
 - Pages
   - DashboardPage
     - DashboardPage.tsx
     - IncomingRideRequest
       - IncomingRequestList.tsx
       - IncomingRequestCard.tsx
     - PastRides
       - PastRideList.tsx
       - PastRideCard.tsx   
   - RideRequestPage
     - RideRequestPage.tsx
     - RideRequestCard.tsx  
   - OnGoingRidePage
     - OnGoingRidePage.tsx
     - UserInfoCard.tsx
     - RideStatus.tsx  
     - TripDetailsCard.tsx


--------------------------------------------------------------------------------------------------------------




   
